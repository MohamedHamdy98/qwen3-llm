import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from pynvml import (
    nvmlInit, nvmlShutdown, nvmlDeviceGetHandleByIndex,
    nvmlDeviceGetMemoryInfo, nvmlDeviceGetUtilizationRates)

def get_gpu_info(index=0):
    try:
        nvmlInit()
        handle = nvmlDeviceGetHandleByIndex(index)
        mem_info = nvmlDeviceGetMemoryInfo(handle)
        utilization = nvmlDeviceGetUtilizationRates(handle)

        gpu_data = {
            "gpu_index": index,
            "mem_used_MB": mem_info.used // 1024**2,
            "mem_total_MB": mem_info.total // 1024**2,
            "gpu_util_percent": utilization.gpu,
            "mem_util_percent": utilization.memory
        }
        return gpu_data
    except Exception as e:
        return {"error": str(e)}
    finally:
        try:
            nvmlShutdown()
        except:
            pass

from langdetect import detect

def build_system_message(text: str):
    try:
        lang = detect(text)
    except:
        lang = "ar"  # fallback

    if lang == "en":
        # ุงููุณุฎุฉ ุงูุฅูุฌููุฒูุฉ
        system_message = """
Extract regulatory clauses from the text. Any sentence that contains an obligation, restriction, or instruction = a separate clause. Output JSON only.

Example 1 ("must" patterns):
Text: "The licensee must obtain approval. The licensee must not resell. The subscriber shall verify the data."

Output:
{
  "clauses": [
    {
      "title": "Instruction: 1",
      "description": "The licensee must obtain approval.",
    },
    {
      "title": "Instruction: 2",
      "description": "The licensee must not resell SMS services to external parties.",
    },
    {
      "title": "Instruction: 3",
      "description": "The subscriber shall verify the data.",
    }
  ]
}

Example 2 (other patterns):
Text: "The service may not be used for illegal purposes. Publishing prohibited content is forbidden. No single user authorization."

Output:
{
  "clauses": [
    {
      "title": "Instruction: 1",
      "description": "The service may not be used for illegal purposes.",
    },
    {
      "title": "Instruction: 2",
      "description": "Publishing prohibited content is forbidden.",
    },
    {
      "title": "Instruction: 3",
      "description": "No single user authorization for message preparation and approval.",
    }
  ]
}

๐ Look for:
- must, shall, required, mandatory
- may not, prohibited, forbidden, not allowed
- obligation, restriction, necessity
- "should be" as a condition

Now extract from the following text:
        """
    else:
        # ุงููุณุฎุฉ ุงูุนุฑุจูุฉ (ุฒู ุงููู ุนูุฏู)
        system_message = '''
ุงุณุชุฎุฑุฌ ุงูุจููุฏ ุงูุชูุธูููุฉ ูู ุงููุต. ุฃู ุฌููุฉ ุชุญุชูู ุนูู ุงูุชุฒุงู ุฃู ููุฏ ุฃู ุชุนูููุฉ = ุจูุฏ ูููุตู. ุฅุฎุฑุงุฌ JSON ููุท.

ูุซุงู 1 (ุฃููุงุท "ูุฌุจ"):
ุงููุต: "ูุฌุจ ุนูู ุงููุตุฑุญ ูู ุงูุญุตูู ุนูู ููุงููุฉ. ูุฌุจ ุฃูุง ูููู ุจุฅุนุงุฏุฉ ุงูุจูุน. ูุชุนูู ุนูู ุงููุดุชุฑู ุงูุชุญูู ูู ุงูุจูุงูุงุช."

ุงูุฅุฎุฑุงุฌ:
{
  "clauses": [
    {
      "title": "ุงูุชุนูููุงุช: 1",
      "description": "ูุฌุจ ุนูู ุงููุตุฑุญ ูู ุงูุญุตูู ุนูู ููุงููุฉ.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 2",
      "description": "ูุฌุจ ุฃูุง ูููู ุงููุตุฑุญ ูู ูุชูุฏูู ุฎุฏูุฉ ุงูุฑุณุงุฆู ุงููุตูุฑุฉ ุจุฅุนุงุฏุฉ ุงูุจูุน ูุฃู ุฌูุฉ ุฎุงุฑุฌ ุงูููููุฉ.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 3",
      "description": "ูุชุนูู ุนูู ุงููุดุชุฑู ุงูุชุญูู ูู ุงูุจูุงูุงุช.",
    }
  ]
}

ูุซุงู 2 (ุฃููุงุท ุฃุฎุฑู):
ุงููุต: "ูุง ูุฌูุฒ ุงุณุชุฎุฏุงู ุงูุฎุฏูุฉ ูุฃุบุฑุงุถ ุบูุฑ ูุงููููุฉ. ููุญุธุฑ ูุดุฑ ุงููุญุชูู ุงููุฎุงูู. ุนุฏู ููุญ ุตูุงุญูุฉ ูููุณุชุฎุฏู ุงููุงุญุฏ."

ุงูุฅุฎุฑุงุฌ:
{
  "clauses": [
    {
      "title": "ุงูุชุนูููุงุช: 1",
      "description": "ูุง ูุฌูุฒ ุงุณุชุฎุฏุงู ุงูุฎุฏูุฉ ูุฃุบุฑุงุถ ุบูุฑ ูุงููููุฉ.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 2",
      "description": "ููุญุธุฑ ูุดุฑ ุงููุญุชูู ุงููุฎุงูู.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 3",
      "description": "ุนุฏู ููุญ ุตูุงุญูุฉ ุฅุนุฏุงุฏ ูุญุชูู ุงูุฑุณุงูุฉ ูุงุนุชูุงุฏูุง ููุณุชุฎุฏู ูุงุญุฏ.",
    }
  ]
}

ูุซุงู 3 (ุฌูู ุจุฏูู ูููุงุช ุฅูุฒุงู ูุงุถุญุฉ ููู ุชุญุชูู ููุงุนุฏ):
ุงููุต: "ุงูุฎุงุฏู ุงูุฑุฆูุณู ุฏุงุฎู ุงูููููุฉ ููุท. ุงููุณุชุฎุฏู ุณุนูุฏู ุงูุฌูุณูุฉ. ุชุฎุฒูู ุงูุจูุงูุงุช ุฏุงุฎููุงู ูุทููุจ."

ุงูุฅุฎุฑุงุฌ:
{
  "clauses": [
    {
      "title": "ุงูุชุนูููุงุช: 1",
      "description": "ูุฌุจ ุฃู ูููู ุงูุฎุงุฏู ุงูุฑุฆูุณู ูุชูุฏูู ุงูุฎุฏูุฉ ุฏุงุฎู ุงูููููุฉ ูุชุฎุฒูู ุงูุจูุงูุงุช ุฏุงุฎููุงู.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 2",
      "description": "ุฃู ูููู ุงููุณุชุฎุฏู ููุธุงู ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงููุตูุฑุฉ ุณุนูุฏู ุงูุฌูุณูุฉ.",
    }
  ]
}

ูุซุงู 4 (ุฎููุท ูู ูู ุงูุฃููุงุท):
ุงููุต: "ูุฌุจ ุงูุญุตูู ุนูู ุงูุชุฑุฎูุต. ุงูุดุฑูุฉ ุชูุฏู ุงูุฎุฏูุฉ ุจุฌูุฏุฉ ุนุงููุฉ. ูุง ููุณูุญ ุจุงููุตูู ุบูุฑ ุงูููุตุฑุญ ุจู. ุถุฑูุฑุฉ ุชุญุฏูุซ ุงูุจูุงูุงุช ุดูุฑูุงู."

ุงูุฅุฎุฑุงุฌ:
{
  "clauses": [
    {
      "title": "ุงูุชุนูููุงุช: 1",
      "description": "ูุฌุจ ุงูุญุตูู ุนูู ุงูุชุฑุฎูุต.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 2",
      "description": "ูุง ููุณูุญ ุจุงููุตูู ุบูุฑ ุงูููุตุฑุญ ุจู.",
    },
    {
      "title": "ุงูุชุนูููุงุช: 3",
      "description": "ุถุฑูุฑุฉ ุชุญุฏูุซ ุงูุจูุงูุงุช ุดูุฑูุงู.",
    }
  ]
}

๐ ุงุจุญุซ ุนู:
- ูุฌุจุ ูุฌุจ ุนููุ ูุฌุจ ุฃูุงุ ูุฌุจ ุฃู
- ูุง ูุฌูุฒุ ูุง ููุณูุญุ ููุญุธุฑุ ููููุน
- ูุชุนููุ ููุชุฒูุ ุถุฑูุฑุฉุ ูุฌูุจ
- ุนุฏูุ ุฃูุง ููููุ ูุง ูุญู
- "ุฃู ูููู" (ูุดุฑุท ุฃู ูุชุทูุจ)

ุงูุขู ุงุณุชุฎุฑุฌ ูู ุงููุต ุงูุชุงูู:
        '''
    
    return system_message
